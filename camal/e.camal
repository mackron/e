e_h := <../e.h>;
e_c := <../e.c>;

// TODO: Update these paths to a local copy of fs later on once everything settles.
fs_h        :: <../../fs/fs.h>;
fs_c        :: <../../fs/fs.c>;
fs_zip_h    :: <../../fs/extras/backends/zip/fs_zip.h>;
fs_zip_c    :: <../../fs/extras/backends/zip/fs_zip.c>;
fs_subfs_h  :: <../../fs/extras/backends/subfs/fs_subfs.h>;
fs_subfs_c  :: <../../fs/extras/backends/subfs/fs_subfs.c>;
c89thread_h :: <../../c89thread/c89thread.h>;
c89str_h    :: <../../c89str/c89str.h>;

replace_namespace_fs :: function(src:string) string
{
    return @(src)
        ["fs_"] <= "e_"
        ["FS_"] <= "E_";
}

replace_namespace_c89str :: function(src:string) string
{
    return @(src)
        ["c89str_"] <= "e_"
        ["C89STR_"] <= "E_";
}


// Allocation Callbacks
e_h("/\* BEG e_allocation_callbacks.h \*/\R":"\R/\* END e_allocation_callbacks.h \*/") = replace_namespace_fs(@(fs_h("/\* BEG fs_allocation_callbacks.h \*/\R":"\R/\* END fs_allocation_callbacks.h \*/")));
e_c("/\* BEG e_allocation_callbacks.c \*/\R":"\R/\* END e_allocation_callbacks.c \*/") = replace_namespace_fs(@(fs_c("/\* BEG fs_allocation_callbacks.c \*/\R":"\R/\* END fs_allocation_callbacks.c \*/")));


// Stream
rename_fs_format :: function(src:string) string
{
    return @(src)
        ["FS_FORMAT_TEXT"]   <= "E_STREAM_DATA_FORMAT_TEXT"
        ["FS_FORMAT_BINARY"] <= "E_STREAM_DATA_FORMAT_BINARY"
        ["fs_format"]        <= "e_stream_data_format";
}

stream_h := replace_namespace_fs(rename_fs_format(@(fs_h("/\* BEG fs_stream.h \*/\R":"\R/\* END fs_stream.h \*/"))));
stream_c := replace_namespace_fs(rename_fs_format(@(fs_c("/\* BEG fs_stream.c \*/\R":"\R/\* END fs_stream.c \*/"))));

// Alignment fixes.
stream_h
    ["size_t    "] <= "size_t   "
    ["void      "] <= "void     "
    ["/\* Optional\. Duplicate the stream\. \*/"] <= " /* Optional. Duplicate the stream. */";

// Clean up tags.
stream_h
    ["(?m)^\s*/\* BEG e_stream_vtable_duplicate \*/\R"] <= ""
    ["(?m)^\s*/\* END e_stream_vtable_duplicate \*/\R"] <= ""
    ["\R/\* BEG e_stream_writef.h \*/\R"] <= ""
    ["\R/\* END e_stream_writef.h \*/\R"] <= ""
    ["/\* BEG e_stream_duplicate.h \*/"] <= ""
    ["/\* END e_stream_duplicate.h \*/"] <= ""
    ["\R/\* BEG e_stream_helpers.h \*/\R"] <= ""
    ["\R/\* END e_stream_helpers.h \*/$"] <= ""
;

// Write out.
e_h("/\* BEG e_stream.h \*/\R":"\R/\* END e_stream.h \*/") = stream_h;
e_c("/\* BEG e_stream.c \*/\R":"\R/\* END e_stream.c \*/") = stream_c;


// Memory Stream
e_h("/\* BEG e_memory_stream.h \*/\R":"\R/\* END e_memory_stream.h \*/") = replace_namespace_fs(@(fs_h("/\* BEG fs_memory_stream.h \*/\R":"\R/\* END fs_memory_stream.h \*/")));
e_c("/\* BEG e_memory_stream.c \*/\R":"\R/\* END e_memory_stream.c \*/") = replace_namespace_fs(@(fs_c("/\* BEG fs_memory_stream.c \*/\R":"\R/\* END fs_memory_stream.c \*/")));


// Path API
e_h("/\* BEG e_path.h \*/\R":"\R/\* END e_path.h \*/") = replace_namespace_fs(@(fs_h("/\* BEG fs_path.h \*/\R":"\R/\* END fs_path.h \*/")));
e_c("/\* BEG e_path.c \*/\R":"\R/\* END e_path.c \*/") = replace_namespace_fs(@(fs_c("/\* BEG fs_path.c \*/\R":"\R/\* END fs_path.c \*/")));


// Basic String API
e_c("/\* BEG e_basic_strings.c \*/\R":"\R/\* END e_basic_strings.c \*/") = replace_namespace_c89str(@(c89str_h("/\* BEG c89str_stdlib.c \*/\R":"\R/\* END c89str_stdlib.c \*/")));


// Threading
replace_namespace_c89thread :: function(src:string) string
{
    return @(src)
        ["C89THREAD_"] <= "E_"
        ["c89thread_"] <= "e_";
}


c89thread_basic_types := replace_namespace_c89thread(@(c89thread_h("/\* BEG c89thread_basic_types.h \*/\R":"\R/\* END c89thread_basic_types.h \*/")))
    ["e_uintptr   e_pthread_t"] <= "e_uintptr           e_pthread_t";

// Remove the result codes enum. We'll be replacing these with our result codes.
c89thread_basic_types["\R\Renum\R{\R    c89thrd_success" : "};"] = "";

e_h("/\* BEG e_threading_header.h \*/\R":"\R/\* END e_threading_header.h \*/") = c89thread_basic_types;


rename_c89thread_types :: function(src:string) string
{
    return @(src)
        ["c89thrd_t\b"]               <= "e_thread"
        ["c89thrd_start_t"]           <= "e_thread_start_callback"
        ["c89thrd"]                   <= "e_thread"
        ["int e_thread_create"]       <= "E_API e_result e_thread_create"
        ["int e_thread_equal"]        <= "E_API e_bool32 e_thread_equal"
        ["e_thread e_thread_current"] <= "E_API e_thread e_thread_current"
        ["int e_thread_sleep"]        <= "E_API e_result e_thread_sleep"
        ["void e_thread_yield"]       <= "E_API void e_thread_yield"
        ["void e_thread_exit"]        <= "E_API void e_thread_exit"
        ["int e_thread_detach"]       <= "E_API e_result e_thread_detach"
        ["int e_thread_join"]         <= "E_API e_result e_thread_join"

        ["c89mtx_t\b"]                <= "e_mutex"
        ["c89mtx"]                    <= "e_mutex"
        ["e_mutex_plain\b"]           <= "E_MUTEX_TYPE_PLAIN"
        ["e_mutex_timed\b"]           <= "E_MUTEX_TYPE_TIMED"
        ["e_mutex_recursive\b"]       <= "E_MUTEX_TYPE_RECURSIVE"
        ["int e_mutex_init"]          <= "E_API e_result e_mutex_init"
        ["void e_mutex_destroy"]      <= "E_API void e_mutex_destroy"
        ["int e_mutex_lock"]          <= "E_API e_result e_mutex_lock"
        ["int e_mutex_timedlock"]     <= "E_API e_result e_mutex_timedlock"
        ["int e_mutex_trylock"]       <= "E_API e_result e_mutex_trylock"
        ["int e_mutex_unlock"]        <= "E_API e_result e_mutex_unlock"

        ["c89cnd_t\b"]                <= "e_cond"
        ["c89cnd"]                    <= "e_cond"
        ["int e_cond_init"]           <= "E_API e_result e_cond_init"
        ["void e_cond_destroy"]       <= "E_API void e_cond_destroy"
        ["int e_cond_signal"]         <= "E_API e_result e_cond_signal"
        ["int e_cond_broadcast"]      <= "E_API e_result e_cond_broadcast"
        ["int e_cond_wait"]           <= "E_API e_result e_cond_wait"
        ["int e_cond_timedwait"]      <= "E_API e_result e_cond_timedwait"

        ["c89sem_t\b"]                <= "e_semaphore"
        ["c89sem"]                    <= "e_semaphore"
        ["int e_semaphore_init"]      <= "E_API e_result e_semaphore_init"
        ["void e_semaphore_destroy"]  <= "E_API void e_semaphore_destroy"
        ["int e_semaphore_wait"]      <= "E_API e_result e_semaphore_wait"
        ["int e_semaphore_timedwait"] <= "E_API e_result e_semaphore_timedwait"
        ["int e_semaphore_post"]      <= "E_API e_result e_semaphore_post"

        ["c89evnt_t\b"]               <= "e_syncevent"
        ["c89evnt"]                   <= "e_syncevent"
        ["int e_syncevent_init"]      <= "E_API e_result e_syncevent_init"
        ["void e_syncevent_destroy"]  <= "E_API void e_syncevent_destroy"
        ["int e_syncevent_wait"]      <= "E_API e_result e_syncevent_wait"
        ["int e_syncevent_timedwait"] <= "E_API e_result e_syncevent_timedwait"
        ["int e_syncevent_signal"]    <= "E_API e_result e_syncevent_signal"

        // Result codes
        ["e_thread_success"]          <= "E_SUCCESS"
        ["e_thread_signal"]           <= "E_INTERRUPT"
        ["e_thread_nomem"]            <= "E_OUT_OF_MEMORY"
        ["e_thread_timedout"]         <= "E_TIMEOUT"
        ["e_thread_busy"]             <= "E_BUSY"
        ["e_thread_error"]            <= "E_INVALID_ARGS"

        // Anything still using the "c89" namespace just replace with "e_".
        ["c89"]                       <= "e_"

        // Random cleanup.
        ["void\*                    e_cond"] <= "void*            e_cond"   // An alignment fix which was annoying me.
        [" \(not part of C11\)"]      <= ""
    ;
}

c89thread_types_h := replace_namespace_c89thread(@(c89thread_h("/\* BEG c89thread_types.h \*/\R":"\R/\* END c89thread_types.h \*/")));
c89thread_types_h  = rename_c89thread_types(c89thread_types_h);

c89thread_types_c := replace_namespace_c89thread(@(c89thread_h("/\* BEG c89thread_types.c \*/\R":"\R/\* END c89thread_types.c \*/")));
c89thread_types_c  = rename_c89thread_types(c89thread_types_c);

// Condition variables are not currently implemented in c89thread for Windows. For this reason I'm going to
// not include them in the amalgamation.
c89thread_types_h["/\* e_cond \*/" : "/\* e_semaphore \*/"] = "/* e_semaphore */";

c89thread_types_c["\R/\* BEG e_cond_win32.c \*/" : "/\* END e_cond_win32.c \*/\R"] = "";
c89thread_types_c["\R/\* BEG e_cond_pthread.c \*/" : "/\* END e_cond_pthread.c \*/\R"] = "";


e_h("/\* BEG e_thread.h \*/\R":"\R/\* END e_thread.h \*/") = c89thread_types_h;
e_c("/\* BEG e_thread.c \*/\R":"\R/\* END e_thread.c \*/") = c89thread_types_c;


// Deflate API
rename_deflate_symbols :: function(src:string) string
{
    return @(src)
        ["\bfs_zip_deflate"]      <= "e_deflate"
        ["\bFS_ZIP_DEFLATE"]      <= "E_DEFLATE"
        ["\bfs_"]                 <= "e_"
        ["\bFS_"]                 <= "E_"
        ["\bE_ZIP_READ_"]         <= "E_DEFLATE_READ_"
        ["\bE_ZIP_MIN\b"]         <= "E_MIN"
        ["\bE_ZIP_MAX\b"]         <= "E_MAX"
        ["\bE_ZIP_ABS\b"]         <= "E_ABS"
        ["\bE_ZIP_COPY_MEMORY\b"] <= "E_COPY_MEMORY"
        ["\bE_ZIP_MOVE_MEMORY\b"] <= "E_MOVE_MEMORY"
        ["\bE_ZIP_ZERO_MEMORY\b"] <= "E_ZERO_MEMORY"
        ["\bE_ZIP_ZERO_OBJECT\b"] <= "E_ZERO_OBJECT"
        ["\bE_ZIP_ASSERT\b"]      <= "E_ASSERT"
        ["\bE_ZIP_OFFSET_PTR\b"]  <= "E_OFFSET_PTR"
        ["\bE_ZIP_ALIGN\b"]       <= "E_ALIGN"
        ["\be_zip_strncpy_s\b"]   <= "e_strncpy_s"
    ;
}

e_h("/\* BEG e_deflate.h \*/\R":"\R/\* END e_deflate.h \*/") = rename_deflate_symbols(@(fs_zip_c("/\* BEG fs_zip_deflate.h \*/\R":"\R/\* END fs_zip_deflate.h \*/")));
e_c("/\* BEG e_deflate.c \*/\R":"\R/\* END e_deflate.c \*/") = rename_deflate_symbols(@(fs_zip_c("/\* BEG fs_zip_deflate.c \*/\R":"\R/\* END fs_zip_deflate.c \*/")));
    

// Main File System API
rename_fs_symbols :: function(src:string) string
{
    return rename_fs_format(src)
        ["\bfs\b"] <= "e_fs"
        ["\bfs_"]  <= "e_"
        ["\bFS_"]  <= "E_"

        // Some type names need to be adjusted.
        ["\be_config\b"]   <= "e_fs_config"
        ["\be_iterator\b"] <= "e_fs_iterator"
        ["\be_backend\b"]  <= "e_fs_backend"

        // There are some function that need to use slightly different naming. For example, in fs there is
        // a function named "fs_init()". This makes sense in the context of the fs library, but in e, that
        // will result in a function called "e_init()" which is way too general. We want that to instead be
        // "e_fs_init()".
        //
        // Similarly, there are functions where we *don't* want to use the "e_fs" naming scheme. For example
        // we don't want "fs_file_open()" to be "e_fs_file_open()". Instead we can just do "e_file_open()".
        ["\be_config_init\b"]              <= "e_fs_config_init"
        ["\be_init\b"]                     <= "e_fs_init"
        ["\be_uninit\b"]                   <= "e_fs_uninit"
        ["\be_ioctl\b"]                    <= "e_fs_ioctl"
        ["\be_remove\b"]                   <= "e_fs_remove"
        ["\be_rename\b"]                   <= "e_fs_rename"
        ["\be_mkdir\b"]                    <= "e_fs_mkdir"
        ["\be_info\b"]                     <= "e_fs_info"
        ["\be_get_stream\b"]               <= "e_fs_get_stream"
        ["\be_get_allocation_callbacks\b"] <= "e_fs_get_allocation_callbacks"
        ["\be_get_backend_data\b"]         <= "e_fs_get_backend_data"
        ["\be_get_backend_data_size\b"]    <= "e_fs_get_backend_data_size"
        //["\be_open_archive_ex\b"]          <= "e_fs_open_archive_ex"
        //["\be_open_archive\b"]             <= "e_fs_open_archive"
        //["\be_close_archive\b"]            <= "e_fs_close_archive"
        ["\be_gc_archives\b"]              <= "e_fs_gc_archives"
        ["\be_set_archive_gc_threshold\b"] <= "e_fs_set_archive_gc_threshold"
        ["\be_get_archive_gc_threshold\b"] <= "e_fs_get_archive_gc_threshold"
        ["\be_first_ex\b"]                 <= "e_fs_first_ex"
        ["\be_first\b"]                    <= "e_fs_first"
        ["\be_next\b"]                     <= "e_fs_next"
        ["\be_free_iterator\b"]            <= "e_fs_free_iterator"
        ["\be_mount\b"]                    <= "e_fs_mount"
        ["\be_unmount\b"]                  <= "e_fs_unmount"
        ["\be_mount_fs\b"]                 <= "e_fs_mount_fs"
        ["\be_unmount_fs\b"]               <= "e_fs_unmount_fs"
        ["\be_mount_write\b"]              <= "e_fs_mount_write"
        ["\be_unmount_write\b"]            <= "e_fs_unmount_write"

        ["\be_backend"]       <= "e_fs_backend"
        ["\be_proxy"]         <= "e_fs_proxy"

        ["\be_mtx"]           <= "e_mutex"
        ["\bE_MTX_RECURSIVE"] <= "E_MUTEX_TYPE_RECURSIVE"

        ["\bE_STDIO\b"]       <= "E_FS_STDIO"

        // Alignment hacks.
        ["void         \("] <= "void        ("
        ["size_t       \("] <= "size_t      ("
        ["    \(\* "]       <= "       (* "
        ["typedef struct e_file      "] <= "typedef struct e_file         "
        ["typedef struct e_file_info "] <= "typedef struct e_file_info    "
    ;
}

fs_api_h := rename_fs_symbols(@(fs_h("/\* BEG fs.h \*/\R":"\R/\* END fs.h \*/")));
fs_api_c := rename_fs_symbols(@(fs_c("/\* BEG fs.c \*/\R":"\R/\* END fs.c \*/")));

e_h("/\* BEG e_fs.h \*/\R":"\R/\* END e_fs.h \*/") = fs_api_h;
e_c("/\* BEG e_fs.c \*/\R":"\R/\* END e_fs.c \*/") = fs_api_c;


// Zip File System Backend
rename_zip_symbols :: function(src:string) string
{
    return rename_fs_symbols(rename_deflate_symbols(src))
        ["\bfs_zip"]  <= "e_zip"
        ["\bFS_ZIP"]  <= "E_ZIP"
        ["\bE_ZIP\b"] <= "E_FS_ZIP"
    ;
}

zip_docs := rename_zip_symbols(@(fs_zip_h["/\*" : "\*/\R"]));

e_h("/\* BEG e_fs_zip.h \*/\R":"\R/\* END e_fs_zip.h \*/") = rename_zip_symbols(@(fs_zip_h("/\* BEG fs_zip.h \*/\R":"\R/\* END fs_zip.h \*/")))["^"] = zip_docs;
e_c("/\* BEG e_fs_zip.c \*/\R":"\R/\* END e_fs_zip.c \*/") = rename_zip_symbols(@(fs_zip_c("/\* BEG fs_zip.c \*/\R":"\R/\* END fs_zip.c \*/")));


// SubFS File System Backend
rename_subfs_symbols :: function(src:string) string
{
    return rename_fs_symbols(src)
        ["\bfs_subfs"]              <= "e_subfs"
        ["\bFS_SUBFS"]              <= "E_SUBFS"
        ["\bE_SUBFS\b"]             <= "E_FS_SUBFS"
        ["\bE_SUBFS_UNUSED\b"]      <= "E_UNUSED"
        ["\bE_SUBFS_ZERO_OBJECT\b"] <= "E_ZERO_OBJECT"
        ["\bE_SUBFS_ASSERT\b"]      <= "E_ASSERT"
    ;
}

subfs_docs := rename_subfs_symbols(@(fs_subfs_h["/\*" : "\*/\R"]));

e_h("/\* BEG e_fs_subfs.h \*/\R":"\R/\* END e_fs_subfs.h \*/") = rename_subfs_symbols(@(fs_subfs_h("/\* BEG fs_subfs.h \*/\R":"\R/\* END fs_subfs.h \*/")))["^"] = subfs_docs;
e_c("/\* BEG e_fs_subfs.c \*/\R":"\R/\* END e_fs_subfs.c \*/") = rename_subfs_symbols(@(fs_subfs_c("/\* BEG fs_subfs.c \*/\R":"\R/\* END fs_subfs.c \*/")));
